import { configureStore, combineReducers } from '@reduxjs/toolkit';
import { persistStore, persistReducer } from 'redux-persist';
import storage from 'redux-persist/lib/storage'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º localStorage
import productsReducer from './productSpace/productsSlice.ts';
import authReducer from './userSpace/authSlice.ts';
import uiReducer from './uiReducer.ts';
import notificationReducer from './notificationSlice.ts';

// üîπ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è persist
const persistConfig = {
    key: 'root',       // –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage
    storage,           // –ì–¥–µ —Ö—Ä–∞–Ω–∏—Ç—å (localStorage)
    whitelist: ['auth', 'ui', 'notifications'], // –ö–∞–∫–∏–µ —Ä–µ–¥—é—Å–µ—Ä—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
};

// üîπ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–¥—é—Å–µ—Ä (–≤—Å–µ —Ä–µ–¥—é—Å–µ—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
const rootReducer = combineReducers({
    products: productsReducer, // ‚ùå –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º (–¥–∞–Ω–Ω—ã–µ API)
    auth: authReducer,         // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)
    ui: uiReducer,             // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º (UI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
    notifications: notificationReducer, // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
});

// üîπ –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º rootReducer –≤ persistReducer
const persistedReducer = persistReducer(persistConfig, rootReducer);

// üîπ –°–æ–∑–¥–∞–µ–º store —Å persistedReducer
export const store = configureStore({
    reducer: persistedReducer,
    middleware: (getDefaultMiddleware) =>
        getDefaultMiddleware({
            serializableCheck: false, // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        }),
});

// üîπ –°–æ–∑–¥–∞–µ–º persistor
export const persistor = persistStore(store);

// üîπ –¢–∏–ø–∏–∑–∞—Ü–∏—è Redux (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;
