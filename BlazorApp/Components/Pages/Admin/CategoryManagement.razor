@using BlazorApp.Constants
@using BlazorApp.DTOs
@using System.Text.Json
@using MudBlazor
@inject IDialogService DialogService

@inject IHttpClientFactory ClientFactory

<MudPaper Elevation="1" Class="pa-4">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h5">Список категорий</MudText>
        </MudItem>
        <MudItem xs="12">
            <MudTable Items="categories" Hover="true" Bordered="true" Striped="true">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Категории</MudText>
                    <MudSpacer />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="CreateCategory">Добавить категорию</MudButton>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Название</MudTh>
                    <MudTh>Описание</MudTh>
                    <MudTh>Действия</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Название">@context.Name</MudTd>
                    <MudTd DataLabel="Описание">@context.Description</MudTd>
                    <MudTd DataLabel="Действия">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="() => EditCategory(context)" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteCategory(context.Id)" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>
    </MudGrid>

    @if (selectedCategory != null)
    {
        <MudDialog @bind-Visible="isModalVisible" MaxWidth="MaxWidth.Small">
            <MudDialogTitle>@(selectedCategory.Id == Guid.Empty ? "Добавить категорию" : "Редактировать категорию")</MudDialogTitle>
            <MudDialogContent>
                <MudForm @ref="form" Valid="@valid">
                    <MudTextField @bind-Value="selectedCategory.Name" Label="Название" Required="true" />
                    <MudTextField @bind-Value="selectedCategory.Description" Label="Описание" />
                </MudForm>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <MudAlert Severity="Severity.Error" Class="mt-2">@errorMessage</MudAlert>
                }
            </MudDialogContent>
            <MudDialogActions>
                <MudButton Variant="Variant.Text" OnClick="CloseModal">Отмена</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveCategory">Сохранить</MudButton>
            </MudDialogActions>
        </MudDialog>
    }
</MudPaper>

@code { 

    private List<CategoryDto>? categories;
    private CategoryDto? selectedCategory;
    private bool isModalVisible = false;
    private string errorMessage = string.Empty;
    private MudForm? form;
    private bool valid;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        try
        {
            var client = ClientFactory.CreateClient(HttpClientNames.APIClient);
            categories = await client.GetFromJsonAsync<List<CategoryDto>>("category");
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка загрузки данных: {ex.Message}";
        }
    }

    private void CreateCategory()
    {
        selectedCategory = new CategoryDto();
        isModalVisible = true;
    }

    private void EditCategory(CategoryDto category)
    {
        // Копируем данные для избежания прямого изменения списка
        selectedCategory = new CategoryDto
        {
            Id = category.Id,
            Name = category.Name,
            Description = category.Description
        };
        isModalVisible = true;
    }

    private async Task DeleteCategory(Guid categoryId)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Подтверждение удаления",
            "Вы уверены, что хотите удалить эту категорию?",
            yesText: "Да",
            noText: "Нет");

        if (result == true)
        {
            try
            {
                var client = ClientFactory.CreateClient(HttpClientNames.APIClient);
                var response = await client.DeleteAsync($"category/{categoryId}");

                if (response.IsSuccessStatusCode)
                {
                    categories = categories?.Where(c => c.Id != categoryId).ToList();
                }
                else
                {
                    errorMessage = $"Ошибка при удалении категории (код: {response.StatusCode})";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Ошибка при удалении категории: {ex.Message}";
            }
        }
    }

    private async Task SaveCategory()
    {
        await form!.Validate();

        if (!valid)
            return;

        try
        {
            var client = ClientFactory.CreateClient(HttpClientNames.APIClient);

            if (selectedCategory!.Id == Guid.Empty)
            {
                // Создание
                var response = await client.PostAsJsonAsync("category", selectedCategory);
                if (response.IsSuccessStatusCode)
                {
                    await LoadCategories();
                }
                else
                {
                    errorMessage = $"Ошибка при создании категории: {response.StatusCode}";
                }
            }
            else
            {
                // Обновление
                var response = await client.PutAsJsonAsync($"category/{selectedCategory.Id}", selectedCategory);
                if (response.IsSuccessStatusCode)
                {
                    await LoadCategories();
                }
                else
                {
                    errorMessage = $"Ошибка при обновлении категории: {response.StatusCode}";
                }
            }

            isModalVisible = false;
            selectedCategory = null;
            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка сохранения категории: {ex.Message}";
        }
    }

    private void CloseModal()
    {
        isModalVisible = false;
        selectedCategory = null;
        errorMessage = string.Empty;
    }
}
 