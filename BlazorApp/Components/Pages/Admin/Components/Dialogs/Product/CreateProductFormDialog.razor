@using _26_01_25.Constants
@using _26_01_25.DTOs
@using _26_01_25.DTOs.Category
@using _26_01_25.DTOs.Product
@using _26_01_25.DTOs.Supplier
@using _26_01_25.Helpers.Interfaces
@using _26_01_25.Validators
@using MudBlazor
@inject ICloneHelper CloneHelper 

@inherits CommonProductFormBaseComponent

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Добавить товар</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" Model="CreateProductDto" OnValidSubmit="HandleValidSubmit" Validation="@(validator.ValidateValue)" ValidationDelay="0">

            <MudTextField @bind-Value="CreateProductDto.Name" Label="Название" Required="true" RequiredError="Name is required." />

            <MudSelect T="Guid?" @bind-Value="CreateProductDto.CategoryId" Label="Категория" Variant="Variant.Outlined" Required="true" RequiredError="Category is required.">
                @foreach (var category in Categories)
                {
                    <MudSelectItem T="Guid?" Value="@category.Id">@category.DefaultName</MudSelectItem>
                }
            </MudSelect>


            <MudSelect T="Guid?" @bind-Value="CreateProductDto.SupplierId" Label="Поставщик" Variant="Variant.Outlined" Required="true" RequiredError="An Assigned Group is required."> 
                @foreach (var supplier in Suppliers)
                {
                    <MudSelectItem T="Guid?" Value="@supplier.Id">@supplier?.Name</MudSelectItem>
                } 
            </MudSelect>


            <MudNumericField T="decimal" @bind-Value="CreateProductDto.Price" Label="Цена" Min="0.01m" Required="true" For="@(() => CreateProductDto.Price)" />

            <MudValidation />

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mt-2">@ErrorMessage</MudAlert>
            }
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Color="Color.Secondary">Отмена</MudButton>
        <MudButton OnClick="SubmitForm" Color="Color.Primary">Создать</MudButton>
    </DialogActions>
</MudDialog>


@code {


    private CreateProductDtoValidator validator = new CreateProductDtoValidator();

    private CreateProductDto CreateProductDto { get; set; } = new CreateProductDto(); // Копия продукта для редактирования

    private async Task SubmitForm()
    {
        await SubmitForm(async (HttpClient client, CancellationToken token) => await client.PostAsJsonAsync("product/create", CreateProductDto, token));
    }
     

}
